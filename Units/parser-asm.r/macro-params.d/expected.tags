comm	input.asm	/^	.macro comm$/;"	m	end:4
plus1	input.asm	/^	.macro plus1 p, p1$/;"	m	end:7
p	input.asm	/^	.macro plus1 p, p1$/;"	z	macro:plus1
p1	input.asm	/^	.macro plus1 p, p1$/;"	z	macro:plus1
plus2	input.asm	/^	.macro plus2 p p1$/;"	m	end:10
p	input.asm	/^	.macro plus2 p p1$/;"	z	macro:plus2
p1	input.asm	/^	.macro plus2 p p1$/;"	z	macro:plus2
reserve_str	input.asm	/^	.macro reserve_str p1=0 p2$/;"	m	end:13
p1	input.asm	/^	.macro reserve_str p1=0 p2$/;"	z	macro:reserve_str
p2	input.asm	/^	.macro reserve_str p1=0 p2$/;"	z	macro:reserve_str
m	input.asm	/^	.macro m p1:req, p2=0, p3:vararg$/;"	m	end:16
p1	input.asm	/^	.macro m p1:req, p2=0, p3:vararg$/;"	z	macro:m
p2	input.asm	/^	.macro m p1:req, p2=0, p3:vararg$/;"	z	macro:m
p3	input.asm	/^	.macro m p1:req, p2=0, p3:vararg$/;"	z	macro:m
func_define	input.asm	/^	.macro	func_define	name,nr=0$/;"	m	end:27
name	input.asm	/^	.macro	func_define	name,nr=0$/;"	z	macro:func_define
nr	input.asm	/^	.macro	func_define	name,nr=0$/;"	z	macro:func_define
\\name	input.asm	/^	.macro	\\name	arg1,arg2,arg3,arg4$/;"	m	macro:func_define	end:26
arg1	input.asm	/^	.macro	\\name	arg1,arg2,arg3,arg4$/;"	z	macro:func_define.\\name
arg2	input.asm	/^	.macro	\\name	arg1,arg2,arg3,arg4$/;"	z	macro:func_define.\\name
arg3	input.asm	/^	.macro	\\name	arg1,arg2,arg3,arg4$/;"	z	macro:func_define.\\name
arg4	input.asm	/^	.macro	\\name	arg1,arg2,arg3,arg4$/;"	z	macro:func_define.\\name
