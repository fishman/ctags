CPoint	input.ts	/^class CPoint {$/;"	c
x	input.ts	/^  x: number;$/;"	p	class:CPoint
y	input.ts	/^  y: number;$/;"	p	class:CPoint
constructor	input.ts	/^  constructor(x: number, y: number) {$/;"	m	class:CPoint
x	input.ts	/^  constructor(x: number, y: number) {$/;"	v	method:CPoint.constructor
y	input.ts	/^  constructor(x: number, y: number) {$/;"	v	method:CPoint.constructor
BankAccount	input.ts	/^class BankAccount {$/;"	c
balance	input.ts	/^  balance = 0;$/;"	p	class:BankAccount
deposit	input.ts	/^  deposit(credit: number) {$/;"	m	class:BankAccount
credit	input.ts	/^  deposit(credit: number) {$/;"	v	method:BankAccount.deposit
CheckingAccount	input.ts	/^class CheckingAccount extends BankAccount {$/;"	c
constructor	input.ts	/^  constructor(balance: number) {$/;"	m	class:CheckingAccount
balance	input.ts	/^  constructor(balance: number) {$/;"	v	method:CheckingAccount.constructor
writeCheck	input.ts	/^  writeCheck(debit: number) {$/;"	m	class:CheckingAccount
debit	input.ts	/^  writeCheck(debit: number) {$/;"	v	method:CheckingAccount.writeCheck
List	input.ts	/^class List<T extends NamedItem> {$/;"	c
next	input.ts	/^  next: List<T> = null;$/;"	p	class:List
constructor	input.ts	/^  constructor(public item: T) {$/;"	m	class:List
item	input.ts	/^  constructor(public item: T) {$/;"	p	class:List
insertAfter	input.ts	/^  insertAfter(item: T) {$/;"	m	class:List
item	input.ts	/^  insertAfter(item: T) {$/;"	v	method:List.insertAfter
temp	input.ts	/^    var temp = this.next;$/;"	v	method:List.insertAfter
log	input.ts	/^  log() {$/;"	m	class:List
C	input.ts	/^class C {$/;"	c
x	input.ts	/^  x: number;$/;"	p	class:C
x	input.ts	/^  static x: string;$/;"	p	class:C
Messenger	input.ts	/^class Messenger {$/;"	c
message	input.ts	/^  message = "Hello World";$/;"	p	class:Messenger
start	input.ts	/^  start() {$/;"	m	class:Messenger
_this	input.ts	/^    var _this = this;$/;"	v	method:Messenger.start
D	input.ts	/^class D {$/;"	c
data	input.ts	/^  data: string | string[];$/;"	p	class:D
getData	input.ts	/^  getData() {$/;"	m	class:D
data	input.ts	/^    var data = this.data;$/;"	v	method:D.getData
Point	input.ts	/^class Point {$/;"	c
fakePointBuilder	input.ts	/^  protected fakePointBuilder: () => { x: number, y: number };$/;"	p	class:Point
constructor	input.ts	/^  constructor(public x: number, public y: number) { }$/;"	m	class:Point
x	input.ts	/^  constructor(public x: number, public y: number) { }$/;"	p	class:Point
y	input.ts	/^  constructor(public x: number, public y: number) { }$/;"	p	class:Point
length	input.ts	/^  public length() { return Math.sqrt(this.x * this.x + this.y * this.y); }$/;"	m	class:Point
origin	input.ts	/^  static origin = new Point(0, 0);$/;"	p	class:Point
A	input.ts	/^class A {$/;"	c
x	input.ts	/^  private x: number;$/;"	p	class:A
y	input.ts	/^  protected y: number;$/;"	p	class:A
fun	input.ts	/^  public fun: (a: 22 | 30, b: CPoint) => number | string;$/;"	p	class:A
f	input.ts	/^  static f(a: A, b: B) {$/;"	m	class:A
a	input.ts	/^  static f(a: A, b: B) {$/;"	v	method:A.f
b	input.ts	/^  static f(a: A, b: B) {$/;"	v	method:A.f
getXAsT	input.ts	/^  getXAsT<T = any>(): T {$/;"	m	class:A
register	input.ts	/^  register(...args) {$/;"	m	class:A
args	input.ts	/^  register(...args) {$/;"	v	method:A.register
longArgsFun	input.ts	/^  longArgsFun(options: {$/;"	m	class:A
options	input.ts	/^  longArgsFun(options: {$/;"	v	method:A.longArgsFun
closure	input.ts	/^  closure($/;"	m	class:A
x	input.ts	/^    x: number,$/;"	v	method:A.closure
normalizedPath	input.ts	/^    const normalizedPath = path === '\/*' ? '' : path;$/;"	v	method:A.closure
